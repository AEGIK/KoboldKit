<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSString+KoboldKit.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSString(KoboldKit)</TokenIdentifier>
			<Abstract type="html">NSString category methods</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>
			
			<NodeRef refid="53"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/replaceOccurancesOfString:withString:inFile:encoding:</TokenIdentifier>
			<Abstract type="html">Replaces occurances of string in a text file. Does nothing if file does not exist. File is written atomically.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)replaceOccurancesOfString:(NSString *)search withString:(NSString *)replace inFile:(NSString *)file encoding:(NSStringEncoding)encoding</Declaration>
			<Parameters>
				<Parameter>
					<Name>search</Name>
					<Abstract type="html">The string to search for.</Abstract>
				</Parameter><Parameter>
					<Name>replace</Name>
					<Abstract type="html">The string to replace occurances of 'search' with.</Abstract>
				</Parameter><Parameter>
					<Name>file</Name>
					<Abstract type="html">The file (with optional path) in which to replace strings.</Abstract>
				</Parameter><Parameter>
					<Name>encoding</Name>
					<Abstract type="html">The NSStringEncoding used by the file.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns the file contents with search string occurances replaced, or nil if there was an error in input or reading the file.</Abstract></ReturnValue>
			<Anchor>//api/name/replaceOccurancesOfString:withString:inFile:encoding:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/stringByDeletingNonAsciiCharacters</TokenIdentifier>
			<Abstract type="html">Removes all characters not in the ASCII character set (decimal range 32-126).</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringByDeletingNonAsciiCharacters</Declaration>
			
			<ReturnValue><Abstract type="html">The string with all non-ASCII characters removed.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByDeletingNonAsciiCharacters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/stringByDeletingIllegalFileSystemCharacters</TokenIdentifier>
			<Abstract type="html">Removes illegal filesystem characters from the string. The illegal characters are: /\?%*|"<>:</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringByDeletingIllegalFileSystemCharacters</Declaration>
			
			<ReturnValue><Abstract type="html">The string with all illegal file system characters removed.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByDeletingIllegalFileSystemCharacters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/stringByTrimmingWhiteSpaceCharacters</TokenIdentifier>
			<Abstract type="html">Removes whitespace and newline characters from the beginning and end of the string.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringByTrimmingWhiteSpaceCharacters</Declaration>
			
			<ReturnValue><Abstract type="html">The string with whitespace and newline characters trimmed.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByTrimmingWhiteSpaceCharacters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/stringByDeletingIllegalXcodeCharacters</TokenIdentifier>
			<Abstract type="html">Removes characters from the string that are illegal to use in .xcodeproj bundle and related files.
The illegal characters are all illegal file system characters plus: !+~&amp;'(),=@[]^`{}</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringByDeletingIllegalXcodeCharacters</Declaration>
			
			<ReturnValue><Abstract type="html">The string with all illegal .xcodeproj characters removed.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByDeletingIllegalXcodeCharacters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/rectValue</TokenIdentifier>
			<Abstract type="html">A CGRect converted from a string rect representation like "{{10, 20}, {300, 400}}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGRect)rectValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGRect converted from a string rect representation like "{{10, 20}, {300, 400}}".</Abstract></ReturnValue>
			<Anchor>//api/name/rectValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/sizeValue</TokenIdentifier>
			<Abstract type="html">A CGSize converted from a string size representation like "{10, 20}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGSize)sizeValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGSize converted from a string size representation like "{10, 20}".</Abstract></ReturnValue>
			<Anchor>//api/name/sizeValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/pointValue</TokenIdentifier>
			<Abstract type="html">A CGPoint converted from a string point representation like "{300, 400}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)pointValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGPoint converted from a string point representation like "{300, 400}".</Abstract></ReturnValue>
			<Anchor>//api/name/pointValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/color</TokenIdentifier>
			<Abstract type="html">String converted to SKColor object. The string must be in the form "1.0 1.0 1.0 1.0" where the
values stand for the RGBA color values in the same order.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (SKColor *)color</Declaration>
			
			<ReturnValue><Abstract type="html">String converted to SKColor object. The string must be in the form "1.0 1.0 1.0 1.0" where the
values stand for the RGBA color values in the same order.</Abstract></ReturnValue>
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/containsString:</TokenIdentifier>
			<Abstract type="html">Performs a case sensitive search for a substring. Returns YES if the string contains the substring.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)containsString:(NSString *)subString</Declaration>
			<Parameters>
				<Parameter>
					<Name>subString</Name>
					<Abstract type="html">The sub string to search for.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the subString is contained in the string.</Abstract></ReturnValue>
			<Anchor>//api/name/containsString:</Anchor>
		</Token>
		
	</File>
</Tokens>